// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dezzerlol/avitotech-test-2023/internal/handlers/segment (interfaces: SegmentService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/dezzerlol/avitotech-test-2023/internal/db/models"
	gomock "github.com/golang/mock/gomock"
)

// MockSegmentService is a mock of SegmentService interface.
type MockSegmentService struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentServiceMockRecorder
}

// MockSegmentServiceMockRecorder is the mock recorder for MockSegmentService.
type MockSegmentServiceMockRecorder struct {
	mock *MockSegmentService
}

// NewMockSegmentService creates a new mock instance.
func NewMockSegmentService(ctrl *gomock.Controller) *MockSegmentService {
	mock := &MockSegmentService{ctrl: ctrl}
	mock.recorder = &MockSegmentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegmentService) EXPECT() *MockSegmentServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSegmentService) Create(arg0 context.Context, arg1 *models.Segment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSegmentServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSegmentService)(nil).Create), arg0, arg1)
}

// DeleteBySlug mocks base method.
func (m *MockSegmentService) DeleteBySlug(arg0 context.Context, arg1 *models.Segment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBySlug", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBySlug indicates an expected call of DeleteBySlug.
func (mr *MockSegmentServiceMockRecorder) DeleteBySlug(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBySlug", reflect.TypeOf((*MockSegmentService)(nil).DeleteBySlug), arg0, arg1)
}

// GetUserHistory mocks base method.
func (m *MockSegmentService) GetUserHistory(arg0 context.Context, arg1, arg2, arg3 int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserHistory", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserHistory indicates an expected call of GetUserHistory.
func (mr *MockSegmentServiceMockRecorder) GetUserHistory(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserHistory", reflect.TypeOf((*MockSegmentService)(nil).GetUserHistory), arg0, arg1, arg2, arg3)
}

// GetUserSegments mocks base method.
func (m *MockSegmentService) GetUserSegments(arg0 context.Context, arg1 int64) ([]*models.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSegments", arg0, arg1)
	ret0, _ := ret[0].([]*models.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSegments indicates an expected call of GetUserSegments.
func (mr *MockSegmentServiceMockRecorder) GetUserSegments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSegments", reflect.TypeOf((*MockSegmentService)(nil).GetUserSegments), arg0, arg1)
}

// UpdateUserSegments mocks base method.
func (m *MockSegmentService) UpdateUserSegments(arg0 context.Context, arg1 int64, arg2 []string, arg3 int64, arg4 []string) (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSegments", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateUserSegments indicates an expected call of UpdateUserSegments.
func (mr *MockSegmentServiceMockRecorder) UpdateUserSegments(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSegments", reflect.TypeOf((*MockSegmentService)(nil).UpdateUserSegments), arg0, arg1, arg2, arg3, arg4)
}
